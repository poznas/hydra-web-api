<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.agh.hydra.referral.dao.ReferralRepository">

    <resultMap id="ReferralAnnouncementMap" type="com.agh.hydra.referral.entity.ReferralDetailsEntity">
        <id column="id" property="referralId"/>
        <result column="author_id" property="authorId"/>
        <result column="job_id" property="jobId"/>
        <result column="description" property="description"/>
        <result column="referral_bonus" property="referralBonus"/>
        <result column="referral_bonus_percentage" property="referralBonusPercentage"/>
        <result column="closing_date" property="closingDate"/>
        <result column="active" property="active"/>

        <result column="username" property="username"/>
        <result column="imageUrl" property="userImageUrl"/>

        <result column="company_name" property="companyName"/>
        <result column="company_id" property="companyId"/>

        <result column="city" property="city"/>
        <result column="title" property="title"/>
    </resultMap>

    <resultMap id="ReferralApplicationMap" type="com.agh.hydra.referral.entity.ReferralApplicationEntity">
        <id column="id" property="applicationId"/>
        <id column="referral_id" property="referralId"/>
        <id column="user_id" property="userId"/>
        <id column="username" property="username"/>
        <id column="imageUrl" property="userImageUrl"/>
        <id column="github_url" property="githubUrl"/>
        <id column="linkedin_url" property="linkedinUrl"/>
        <id column="cv_url" property="cvUrl"/>
    </resultMap>

    <sql id="selectAnnouncementColumns">
        r.id,
        r.author_id,
        r.job_id,
        r.description,
        r.referral_bonus,
        r.referral_bonus_percentage,
        r.closing_date,
        case when r.active = 'Y' then 1 else 0 end as active,

        u.username,
        u.imageUrl,

        c.company_id,
        c.name as company_name,

        j.title,
        j.city
    </sql>

    <sql id="selectApplicationColumns">
        a.id,
        a.referral_id,
        a.github_url,
        a.linkedin_url,
        a.cv_url,

        u.user_id,
        u.username,
        u.imageUrl
    </sql>


    <insert id="createReferralAnnouncement" parameterType="com.agh.hydra.referral.entity.ReferralEntity">
       insert into hydra.REFERRAL_ANNOUNCEMENT
              (author_id, job_id, description, referral_bonus, referral_bonus_percentage, closing_date)
              select  #{authorId}, #{jobId}, #{description}, #{referralBonus}, #{referralBonusPercentage}, #{closingDate};
     </insert>

    <select id="referralAnnouncementExists" resultType="boolean">
        select exists (
          select 1 from hydra.REFERRAL_ANNOUNCEMENT
            where author_id = #{authorId}
            and job_id = #{jobId}
            and active = 'Y'
            and closing_date > CURRENT_TIMESTAMP
        )
    </select>

    <insert id="createReferralApplication" parameterType="com.agh.hydra.referral.entity.ReferralApplicationEntity">
       insert into hydra.REFERRAL_APPLICATION
              (referral_id, user_id, github_url, linkedin_url, cv_url)
              select  #{referralId}, #{userId}, #{githubUrl}, #{linkedinUrl}, #{cvUrl};
     </insert>

    <select id="referralApplicationExists" resultType="boolean">
        select exists (
          select 1 from hydra.REFERRAL_APPLICATION
            where user_id = #{userId}
            and referral_id = #{referralId}
        )
    </select>

    <select id="getReferralApplications" resultMap="ReferralApplicationMap">
        select
        <include refid="selectApplicationColumns"/>
        from hydra.REFERRAL_APPLICATION a
          natural join hydra.HYDRA_USER u
        where referral_id = #{referralId}
    </select>

    <update id="invalidateReferralAnnouncement" parameterType="long">
        update hydra.REFERRAL_ANNOUNCEMENT set
        active = 'N'
        where id in
        <foreach collection="ids" item="referralId" index="index" open="(" separator="," close=")">
            #{referralId}
        </foreach>
    </update>

    <select id="getReferralAnnouncement"
            resultMap="ReferralAnnouncementMap"
            parameterType="com.agh.hydra.referral.model.ReferralAnnouncementFilter">
        select
        <include refid="selectAnnouncementColumns"/>
        from hydra.REFERRAL_ANNOUNCEMENT r
            join hydra.JOB_ANNOUNCEMENT j on r.job_id = j.id
            join hydra.HYDRA_USER u on r.author_id = u.user_id
            left join hydra.COMPANY c on j.company_id = c.company_id
        <include refid="filterCriteria"/>
        order by r.closing_date
        offset #{offset}
        limit #{pageSize}
    </select>

    <select id="getReferralAnnouncementCount"
            resultType="long"
            parameterType="com.agh.hydra.referral.model.ReferralAnnouncementFilter">
        select count(*)
            from hydra.REFERRAL_ANNOUNCEMENT r
            join hydra.JOB_ANNOUNCEMENT j on r.job_id = j.id
        <include refid="filterCriteria"/>
    </select>


    <sql id="filterCriteria">
        <where>
            r.active = 'Y'
            and r.closing_date > CURRENT_TIMESTAMP
            <include refid="companyIdFilter"/>
            <include refid="refIdFilter"/>
            <include refid="programmingLanguageFilter"/>
            <include refid="cityFilter"/>
            <include refid="authorIdFilter"/>
            <include refid="jobIdFilter"/>
        </where>
    </sql>

    <sql id="refIdFilter">
        <if test="includeIds != null and !includeIds.isEmpty()">
            and r.id in
            <foreach collection="includeIds" item="refId" index="index" open="(" separator="," close=")">
                #{refId}
            </foreach>
        </if>
    </sql>

    <sql id="jobIdFilter">
        <if test="jobIds != null and !jobIds.isEmpty()">
            and r.job_id in
            <foreach collection="jobIds" item="jobId" index="index" open="(" separator="," close=")">
                #{jobId}
            </foreach>
        </if>
    </sql>

    <sql id="authorIdFilter">
        <if test="authorIds != null and !authorIds.isEmpty()">
            and r.author_id in
            <foreach collection="authorIds" item="authorId" index="index" open="(" separator="," close=")">
                #{authorId}
            </foreach>
        </if>
    </sql>

    <sql id="companyIdFilter">
        <if test="companyIds != null and !companyIds.isEmpty()">
            and j.company_id in
            <foreach collection="companyIds" item="companyId" index="index" open="(" separator="," close=")">
                #{companyId}
            </foreach>
        </if>
    </sql>

    <sql id="programmingLanguageFilter">
        <if test="languages != null and !languages.isEmpty()">
            and
            <foreach collection="languages" item="language" index="index" open="(" separator=" or " close=")">
                j.programming_languages like ('%' || #{language} || '%')
            </foreach>
        </if>
    </sql>

    <sql id="cityFilter">
        <if test="cities != null and !cities.isEmpty()">
            and j.city in
            <foreach collection="cities" item="city" index="index" open="(" separator="," close=")">
                #{city}
            </foreach>
        </if>
    </sql>

</mapper>
