<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.agh.hydra.wiki.dao.WikiRepository">

    <resultMap id="InfoResultMap" type="com.agh.hydra.wiki.entity.RecruitmentInfoEntity">
        <id column="id" property="id"/>
        <result column="user_id" property="authorId"/>
        <result column="company_id" property="companyId"/>
        <result column="recruitmentType" property="recruitmentType"/>
        <result column="programmingLanguage" property="programmingLanguage"/>
        <result column="content" property="content"/>
        <result column="active" property="active"/>
    </resultMap>

    <resultMap id="InfoDetailsResultMap" type="com.agh.hydra.wiki.entity.RecruitmentInfoEntity">
        <id column="id" property="id"/>
        <result column="user_id" property="authorId"/>
        <result column="company_id" property="companyId"/>
        <result column="recruitmentType" property="recruitmentType"/>
        <result column="programmingLanguage" property="programmingLanguage"/>
        <result column="content" property="content"/>
        <result column="active" property="active"/>
        <result column="username" property="username"/>
        <result column="imageUrl" property="userImageUrl"/>
        <result column="companyName" property="companyName"/>
        <result column="ratio" property="userReliabilityRatio"/>
    </resultMap>

    <sql id="selectColumns">
        id,
        user_id
        company_id,
        recruitmentType,
        programmingLanguage,
        content,
        case when active = 'Y' then 1 else 0 end as active
    </sql>


    <update id="createInformation" parameterType="com.agh.hydra.wiki.entity.RecruitmentInfoEntity">
       insert into hydra.RECRUITMENT_INFORMATION
              (user_id, company_id, recruitmentType, programmingLanguage, content)
              select  #{authorId}, #{companyId}, #{recruitmentType}, #{programmingLanguage}, #{content};
     </update>

    <update id="invalidateInformation" parameterType="long">
        update hydra.RECRUITMENT_INFORMATION set
        active = 'N'
        where id in
        <foreach collection="informationIds" item="informationId" index="index" open="(" separator="," close=")">
            #{informationId}
        </foreach>
    </update>

    <update id="updateInformationVote">
        update hydra.INFORMATION_VOTE set
                            vote = #{vote}
        where user_id = #{userId}
          and information_id = #{informationId};

       insert into hydra.INFORMATION_VOTE (user_id, information_id, vote)
              select  #{userId}, #{informationId}, #{vote}
              where not exists (select 1 from hydra.INFORMATION_VOTE
                            where user_id = #{userId}
                            and information_id = #{informationId});
    </update>

    <select id="getRecruitmentInformation"
            resultMap="InfoDetailsResultMap"
            parameterType="com.agh.hydra.wiki.model.RecruitmentInfoFilter">
        select null
    </select>

    <select id="getInformationCount"
            resultType="long"
            parameterType="com.agh.hydra.wiki.model.RecruitmentInfoFilter">
        select 10
    </select>
</mapper>